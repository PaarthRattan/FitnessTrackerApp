/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */

package com.mycompany.fitnesstrackerapp;

// Import statements for input/output operations and data structures
import java.io.BufferedReader; // Provides classes for reading text from a character-input stream
import java.io.FileReader;     // Reads text from a character file
import java.io.IOException;    // Handles exceptions related to input/output operations
import java.util.HashMap;      // Provides a hash table-based implementation of the Map interface
import java.util.Map;          // Represents a collection of key-value pairs


/**
 * * DietPlans JFrame for fitness tracker application.
 * This class provides functionality for calculating maintenance calories,
 * protein intake, and displaying diet plans based on user inputs.
 * It then uses the calories to recommend diets depending on what would be beneficial for the user!
 */
public class DietPlans extends javax.swing.JFrame {
    
    // A map to store user passwords, where the keys are usernames and values are passwords
    private static Map<String, String> userPasswords = new HashMap<>();

    // Constants for activity multipliers
    private double activityLevelMultiplier = 0.0; // Initialized to 0.0, will be updated based on activity level
    private double maintenanceCalories; // Stores calculated maintenance calories
    private double proteinIntake; // Stores calculated protein intake
    private double adjustment; // Used to adjust calories based on weight goal (gain/lose/maintain)

    /**
     * Creates new form DietPlans
     */
    public DietPlans() {
        initComponents();
        populateUserPasswords("userInfo"); // Load user passwords on initialization
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
    private void initComponents() {

        butBack = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        txtOutputs = new javax.swing.JTextArea();
        ButtonGroupActivity = new javax.swing.ButtonGroup();
        ButtonGroupMacro = new javax.swing.ButtonGroup();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        butBack1 = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        txtMaintenanceCalories = new javax.swing.JTextField();
        txtProteinIntake = new javax.swing.JTextField();
        jScrollPane5 = new javax.swing.JScrollPane();
        txtOutput = new javax.swing.JTextArea();
        jLabel6 = new javax.swing.JLabel();
        btnFindDiets = new javax.swing.JButton();
        btnSedentary = new javax.swing.JRadioButton();
        btnLightActive = new javax.swing.JRadioButton();
        btnModActive = new javax.swing.JRadioButton();
        btnVeryActive = new javax.swing.JRadioButton();
        btnExtraActive = new javax.swing.JRadioButton();
        btnCalculate = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        lblPassword = new javax.swing.JLabel();
        txtPassword = new javax.swing.JTextField();
        txtUpdate = new javax.swing.JTextField();

        butBack.setText("Back");
        butBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                butBackActionPerformed(evt);
            }
        });

        txtOutputs.setEditable(false);
        txtOutputs.setColumns(20);
        txtOutputs.setRows(5);
        jScrollPane3.setViewportView(txtOutputs);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 36)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(0, 0, 255));
        jLabel1.setText("Diet Plan");

        jLabel2.setText("Here you are given names of diets to choose from along with foods that correspond with the diet depending on your BMI and protein requirements.");

        butBack1.setText("Back");
        butBack1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                butBack1ActionPerformed(evt);
            }
        });

        jLabel4.setText("Daily Calories:");

        jLabel5.setText("Protein Intake (g) :");

        txtMaintenanceCalories.setEditable(false);
        txtMaintenanceCalories.setText("0.0");
        txtMaintenanceCalories.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtMaintenanceCaloriesActionPerformed(evt);
            }
        });

        txtProteinIntake.setEditable(false);
        txtProteinIntake.setText("0.0");

        txtOutput.setEditable(false);
        txtOutput.setColumns(20);
        txtOutput.setRows(5);
        jScrollPane5.setViewportView(txtOutput);

        jLabel6.setText("Choose your activity level and find diets, calculate your protein needs, and calculate your calorie needs.");

        btnFindDiets.setText("Find Diets");
        btnFindDiets.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnFindDietsActionPerformed(evt);
            }
        });

        ButtonGroupActivity.add(btnSedentary);
        btnSedentary.setText("Sedentary");
        btnSedentary.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSedentaryActionPerformed(evt);
            }
        });

        ButtonGroupActivity.add(btnLightActive);
        btnLightActive.setText("Lightly Active");
        btnLightActive.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLightActiveActionPerformed(evt);
            }
        });

        ButtonGroupActivity.add(btnModActive);
        btnModActive.setText("Moderately Active");
        btnModActive.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnModActiveActionPerformed(evt);
            }
        });

        ButtonGroupActivity.add(btnVeryActive);
        btnVeryActive.setText("Very Active");
        btnVeryActive.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnVeryActiveActionPerformed(evt);
            }
        });

        ButtonGroupActivity.add(btnExtraActive);
        btnExtraActive.setText("Extra Active");
        btnExtraActive.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExtraActiveActionPerformed(evt);
            }
        });

        btnCalculate.setText("Calculate Macros");
        btnCalculate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCalculateActionPerformed(evt);
            }
        });

        jLabel3.setText("You may also calculate  your protein requirements and calorie requirements.");

        lblPassword.setText("Enter Password So We Can Access Your Personal Details To Calculate Your Macros: ");

        txtPassword.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtPasswordActionPerformed(evt);
            }
        });

        txtUpdate.setEditable(false);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel1)
                .addGap(269, 269, 269)
                .addComponent(butBack1)
                .addGap(181, 181, 181))
            .addGroup(layout.createSequentialGroup()
                .addGap(17, 17, 17)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jLabel2))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel3)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(228, 228, 228)
                                        .addComponent(btnCalculate)))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(txtUpdate, javax.swing.GroupLayout.PREFERRED_SIZE, 360, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 391, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(25, 25, 25)))
                        .addGap(29, 29, 29))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel6)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(lblPassword)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 18, Short.MAX_VALUE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(11, 11, 11)
                                        .addComponent(jLabel5)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(txtProteinIntake, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(58, 58, 58)
                                        .addComponent(jLabel4)
                                        .addGap(65, 65, 65)))
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(txtMaintenanceCalories, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(txtPassword, javax.swing.GroupLayout.PREFERRED_SIZE, 159, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addGap(453, 453, 453))))
            .addGroup(layout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnLightActive)
                    .addComponent(btnSedentary)
                    .addComponent(btnModActive)
                    .addComponent(btnVeryActive)
                    .addComponent(btnFindDiets)
                    .addComponent(btnExtraActive))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(147, 147, 147)
                .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 332, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGap(32, 32, 32)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(butBack1))
                .addGap(18, 18, 18)
                .addComponent(jLabel2)
                .addGap(18, 18, 18)
                .addComponent(jLabel3)
                .addGap(18, 18, 18)
                .addComponent(jLabel6)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnSedentary)
                .addGap(8, 8, 8)
                .addComponent(btnLightActive)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnModActive)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnVeryActive)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnExtraActive)
                .addGap(18, 18, 18)
                .addComponent(btnFindDiets)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblPassword)
                            .addComponent(txtPassword, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(88, 88, 88)
                                .addComponent(txtUpdate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(46, 46, 46)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(txtProteinIntake, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel4)
                                    .addComponent(txtMaintenanceCalories, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel5))))
                        .addGap(44, 44, 44))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(btnCalculate)
                        .addGap(25, 25, 25))))
        );

        pack();
    }// </editor-fold>                        

    private void butBackActionPerformed(java.awt.event.ActionEvent evt) {                                        

    }                                       

    private void butBack1ActionPerformed(java.awt.event.ActionEvent evt) {                                         
         // Navigate back to the HomeScreen
        OptionsScreen optionsScreen = new OptionsScreen(); // Create an instance of the OptionsScreen
        optionsScreen.setVisible(true); // Make the OptionsScreen visible
        this.dispose(); // Dispose the current frame (DietPlans) to close it
    }                                        

    private void btnFindDietsActionPerformed(java.awt.event.ActionEvent evt) {                                             
        // TODO add your handling code here:
        
        // Get the maintenance calories as a double
        double maintenanceCalories;
        try {
            maintenanceCalories = Double.parseDouble(txtMaintenanceCalories.getText());

            // Check if maintenanceCalories is 0.0
            if (maintenanceCalories == 0.0) {
                txtUpdate.setText("Please calculate maintenance calories first.");
                return;
            }
        } catch (NumberFormatException e) {
            txtUpdate.setText("Please enter a valid maintenance calories value.");
            return;
        }

        // Read the diets from the file and display the appropriate ones
        try (BufferedReader reader = new BufferedReader(new FileReader("diets.txt"))) {
            String line;
            boolean foundMatchingDiets = false;
            txtOutput.setText("Recommended Diets:\n");

            while ((line = reader.readLine()) != null) {
                String[] dietInfo = line.split(", ");

                if (dietInfo.length >= 3) {
                    double dietCalories = Double.parseDouble(dietInfo[2]);

                    if ((maintenanceCalories >= 2500 && dietCalories >= 2500) ||
                        (maintenanceCalories < 2500 && dietCalories < 2500)) {
                        // Display the diet that matches the maintenance calories
                        txtOutput.append(dietInfo[1] + ": " + dietInfo[3] + ", " + dietInfo[4] + ", " + dietInfo[5] + "\n");
                        foundMatchingDiets = true;
                    }
                }
            }

            if (!foundMatchingDiets) {
                txtUpdate.setText("No matching diets found for your maintenance calories.");
            }
        } catch (IOException e) {
            txtUpdate.setText("Error reading diets file.");
        }
    }                                            

    private void txtMaintenanceCaloriesActionPerformed(java.awt.event.ActionEvent evt) {                                                       
        // TODO add your handling code here:
    }                                                      

    private void btnCalculateActionPerformed(java.awt.event.ActionEvent evt) {                                             
        // Get the password entered by the user
        String enteredPassword = txtPassword.getText();

        if (validatePassword(enteredPassword)) {
            txtUpdate.setText(""); // Clear any previous messages

            // Retrieve user data based on the entered password and perform calculations
            String username = getUsernameFromPassword(enteredPassword);
            String[] userData = getUserData(username);

            if (userData != null) {
                String gender = userData[2];
                double weight = Double.parseDouble(userData[4]);
                double height = Double.parseDouble(userData[3]);
                int age = Integer.parseInt(userData[5]);

                // Calculate maintenance calories
                maintenanceCalories = getActivityLevelMultiplier(gender, weight, height, age) * calculateBMR(gender, weight, height, age);
                String formattedValue = String.format("%.1f", maintenanceCalories); // Format the calculated value to one decimal place
                txtMaintenanceCalories.setText(formattedValue); // Display the formatted maintenance calories

                // Calculate protein intake
                proteinIntake = calculateProteinIntake(maintenanceCalories);
                String formattedProtein = String.format("%.1f", proteinIntake); // Format the calculated value to one decimal place
                txtProteinIntake.setText(formattedProtein); // Display the formatted protein intake
            } else {
                txtUpdate.setText("User data not found.");
            }
        } else if (enteredPassword.isEmpty()) {
            // Handle the case when the password field is empty
            txtUpdate.setText(""); // Clear any previous messages
            txtUpdate.setText("Please enter a password"); // Display a message asking the user to enter a password
            txtProteinIntake.setText("0.0"); // Set the protein intake field to 0.0
            txtMaintenanceCalories.setText("0.0"); // Set the maintenance calories field to 0.0
        } else {
            // Handle the case when an invalid password is entered
            txtUpdate.setText(""); // Clear any previous messages
            txtUpdate.setText("Invalid password. Please try again."); // Display a message indicating an invalid password
            txtProteinIntake.setText("0.0"); // Set the protein intake field to 0.0
            txtMaintenanceCalories.setText("0.0"); // Set the maintenance calories field to 0.0
        }
    }
                              

    private void btnSedentaryActionPerformed(java.awt.event.ActionEvent evt) {                                             
       
    }                                            

    private void btnLightActiveActionPerformed(java.awt.event.ActionEvent evt) {                                               
        // TODO add your handling code here:
    }                                              

    private void btnModActiveActionPerformed(java.awt.event.ActionEvent evt) {                                             
        // TODO add your handling code here:
    }                                            

    private void btnVeryActiveActionPerformed(java.awt.event.ActionEvent evt) {                                              
        // TODO add your handling code here:
    }                                             

    private void btnExtraActiveActionPerformed(java.awt.event.ActionEvent evt) {                                               
        // TODO add your handling code here:
    }                                              

    private void txtPasswordActionPerformed(java.awt.event.ActionEvent evt) {                                            
        // TODO add your handling code here:
    }
    
    // Method to validate the entered password
    private boolean validatePassword(String enteredPassword) {
        return userPasswords.containsValue(enteredPassword); // Check if the entered password is present in the stored passwords
    }

    // Method to get username from password
    private String getUsernameFromPassword(String password) {
        for (Map.Entry<String, String> entry : userPasswords.entrySet()) {
            if (entry.getValue().equals(password)) {
                return entry.getKey(); // Retrieve the username associated with the provided password
            }
        }
        return null;
    }

    // Method to retrieve user data by username
    private String[] getUserData(String username) {
        try (BufferedReader reader = new BufferedReader(new FileReader("userInfo"))) {
            String line;
            while ((line = reader.readLine()) != null) {
                String[] userData = line.split(",");
                if (userData.length >= 7 && userData[0].equals(username)) {
                    return userData; // Retrieve user data (if available) based on the provided username
                }
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
        return null; // Return null if user data is not found
    }

    // Method to populate the userPasswords map with username-password pairs from a file
    private void populateUserPasswords(String fileName) {
        try (BufferedReader reader = new BufferedReader(new FileReader(fileName))) {
            String line;
            while ((line = reader.readLine()) != null) {
                String[] userData = line.split(",");
                if (userData.length >= 2) {
                    String username = userData[0];
                    String password = userData[1];
                    userPasswords.put(username, password); // Store username-password pairs in the userPasswords map
                }
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    // Method to calculate the activity level multiplier based on user's selection
    public double getActivityLevelMultiplier(String gender, double weight, double height, int age) {
        if (btnSedentary.isSelected()) {
            activityLevelMultiplier = 1.2;
        } else if (btnLightActive.isSelected()) {
            activityLevelMultiplier = 1.375;
        } else if (btnModActive.isSelected()) {
            activityLevelMultiplier = 1.55;
        } else if (btnVeryActive.isSelected()) {
            activityLevelMultiplier = 1.725;
        } else if (btnExtraActive.isSelected()) {
            activityLevelMultiplier = 1.9;
        } else {
            txtUpdate.setText("Please select an activity level"); // Display a message if no activity level is selected
        }

        if (activityLevelMultiplier != 0.0) {
            return activityLevelMultiplier; // Return the calculated activity level multiplier
        } else {
            txtUpdate.setText("Please select an activity level"); // Display a message if activityLevelMultiplier is not set
            return 0.0;
        }
    }

    // Calculate Basal Metabolic Rate (BMR) based on gender, weight, height, and age
    public double calculateBMR(String gender, double weight, double height, int age) {
        if (gender.equalsIgnoreCase("Male")) {
            return 10 * (weight * 0.453592f) + (6.25f * height) - 5 * (age + 5);
        } else {
            return 10 * (weight * 0.45392f) + (6.25 * height) - 5 * (age - 161);
        }
    }

    // Calculate Protein Intake based on provided calories
    private static double calculateProteinIntake(double calories) {
        return (calories * 0.3) / 4; // Calculate protein intake based on calories, where protein is 30% of total calories
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(DietPlans.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(DietPlans.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(DietPlans.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(DietPlans.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new DietPlans().setVisible(true);
            }
        });
    }
 
    // Variables declaration - do not modify                     
    private javax.swing.ButtonGroup ButtonGroupActivity;
    private javax.swing.ButtonGroup ButtonGroupMacro;
    private javax.swing.JButton btnCalculate;
    private javax.swing.JRadioButton btnExtraActive;
    private javax.swing.JButton btnFindDiets;
    private javax.swing.JRadioButton btnLightActive;
    private javax.swing.JRadioButton btnModActive;
    private javax.swing.JRadioButton btnSedentary;
    private javax.swing.JRadioButton btnVeryActive;
    private javax.swing.JButton butBack;
    private javax.swing.JButton butBack1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JLabel lblPassword;
    private javax.swing.JTextField txtMaintenanceCalories;
    private javax.swing.JTextArea txtOutput;
    private javax.swing.JTextArea txtOutputs;
    private javax.swing.JTextField txtPassword;
    private javax.swing.JTextField txtProteinIntake;
    private javax.swing.JTextField txtUpdate;
    // End of variables declaration                   
}

